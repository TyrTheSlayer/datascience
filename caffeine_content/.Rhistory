library(LSLR)
library(lslr)
library(MASS, lib.loc = "/usr/lib/R/library")
library(lslr)
library(LSLR)
install.packages('ISLR')
library('ISLR')
library(ISLR)
library('ISLR')
install.packages('ISLR')
library('ISLR')
OJ
orangeJuice <- OJ
View(orangeJuice)
train = sample(1:nrow(orangeJuice), 800)
View(orangeJuice)
test = orangeJuice[-train,]
train = orangeJuice[train,]
-0.848+(1.545*.1)-(1.942*0.75)+(1.973*(0.1^2))+(2.495*(0.75^2))+(0.104*(0.1^3))+(0.095*(0.75^3))+(2.009*0.1*0.75)
-0.848+(1.545*.1)-(1.942*0.75)+(1.973*(0.1^2))+(2.495*(0.75^2))+(0.104*(0.1^3))+(0.095*(0.75^3))+(2.009*0.1*0.75)
dose1 = 0.5
dose2 = 0.75
-0.848+(1.545*does1)-(1.942*does2)+(1.973*(does1^2))+(2.495*(does2^2))+(0.104*(does1^3))+(0.095*(does2^3))+(2.009*does1*does2)
does1 = 0.5
does2 = 0.75
-0.848+(1.545*does1)-(1.942*does2)+(1.973*(does1^2))+(2.495*(does2^2))+(0.104*(does1^3))+(0.095*(does2^3))+(2.009*does1*does2)
1 / (1 + exp(-1.171141))
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * ooes1^3) + (0.095 * does2^3) + (3.009*does1*does2)
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(1.546141))
1/(1+exp(-1.546141))
does1=0.10
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(0.4609754))
does1 = -0.47
does2 = -0.39
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(-0.533672))
does2 = 0.18
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(1.671841))
#Section for library/package imports----
library(ggplot2)
library(dplyr)
#setting working directory and importing the dataset----
setwd("~/datascience/caffeine_content/")
caffeine <- read.csv("caffeine.csv")
View(caffeine)
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot()
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot()+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot(outlier.colour =
"red", outlier.shape = 1, aes(colour = drv))+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot(outlier.colour =
"red", outlier.shape = 1, aes(colour = red))+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot(outlier.colour =
"red", outlier.shape = 1, aes(color = "#3366FF"))+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot(outlier.colour =
"red", outlier.shape = 1, aes(color = "#3369FF"))+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg.))+geom_boxplot(outlier.colour =
"red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
ggplot(caffeine, aes(type, Caffeine..mg., fill=type) )+geom_boxplot(outlier.colour =
"red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine (mg)")+ggtitle("Drink Type boxplot to caffeine")
data <- read.csv("caffeine.csv")
#Section for library/package imports----
library(ggplot2)
library(dplyr)
#general data analysis, adding caffeine concentration----
head(data)
tail(data)
data$CaffeineConcentration = data[data$Caffeine..mg.] / data[data$Volume..ml.]
data$CaffeineConcentration = data[data$Caffeine..mg.,] / data[data$Volume..ml.,]
data = mutate("Caffeine concentration (mg/ml)" = Caffeine..mg. / Volume..ml.)
data = mutate("Caffeine concentration (mg/ml)" = "Caffeine..mg." / "Volume..ml.")
data = mutate("Caffeine concentration (mg/ml)" = data$Caffeine..mg. / data$Volume..ml.)
data = mutate(data$caffeine_concetration = data$Caffeine..mg. / data$Volume..ml.)
data %>% mutate(caffeine_concetration = Caffeine..mg. / Volume..ml.)
View(caffeine)
data = mutate(caffeine_concetration = Caffeine..mg. / Volume..ml.)
data <- mutate(data$caffeine_concetration = data$Caffeine..mg. / data$Volume..ml.)
data <- mutate(caffeine_concetration = data$Caffeine..mg. / data$Volume..ml.)
data %>% (data <- mutate(caffeine_concetration = Caffeine..mg. / Volume..ml.))
data %>% (data <- mutate(caffeine_concetration = Caffeine..mg. / Volume..ml.))
data <- mutate(data, caffeine_concetration = Caffeine..mg. / Volume..ml.)
#boxplot of type versus caffeine concentration----
ggplot(data, aes(type, caffeine_concentration, fill=type) )+
geom_boxplot(outlier.colour = "red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine Concetration (mg/ml)")+ggtitle("Drink Type boxplot to caffeine
concentration")
View(data)
names(data)
data <- read.csv("caffeine.csv")
#Section for library/package imports----
library(ggplot2)
library(dplyr)
#general data analysis, adding caffeine concentration----
head(data)
tail(data)
data <- mutate(data, caffeine_concemtration = Caffeine..mg. / Volume..ml.)
#boxplot of type versus caffeine concentration----
ggplot(data, aes(type, caffeine_concentration, fill=type) )+
geom_boxplot(outlier.colour = "red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine Concetration (mg/ml)")+ggtitle("Drink Type boxplot to caffeine
concentration")
View(data)
remove(data)
data <- read.csv("caffeine.csv")
#Section for library/package imports----
library(ggplot2)
library(dplyr)
#general data analysis, adding caffeine concentration----
head(data)
tail(data)
data <- mutate(data, caffeine_concentration = Caffeine..mg. / Volume..ml.)
#boxplot of type versus caffeine concentration----
ggplot(data, aes(type, caffeine_concentration, fill=type) )+
geom_boxplot(outlier.colour = "red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine Concetration (mg/ml)")+ggtitle("Drink Type boxplot to caffeine
concentration")
#boxplot of type versus caffeine concentration----
ggplot(data, aes(type, caffeine_concentration, fill=type) )+
geom_boxplot(outlier.colour = "red", outlier.shape = 1)+xlab("Type of Drink")+
ylab("Caffeine Concetration (mg/ml)")+
ggtitle("Drink Type boxplot to caffeine concentration")
View(data)
View(data)
#basic bar plot to see drink ranking----
ggplot(data, aes(drink, caffeine_concentration, fill=type))+geom_bar()
#basic bar plot to see drink ranking----
ggplot(data, aes(drink, caffeine_concentration, fill=type))+geom_col()
#basic bar plot to see drink ranking----
data.sort1 <- data[order(caffeine_concentration),]
#basic bar plot to see drink ranking----
data.sort1 <- data[order(data$caffeine_concentration),]
head(data.sort1)
#basic bar plot to see drink ranking----
data.sort1 <- data[order(-data$caffeine_concentration),]
head(data.sort1)
ggplot(data[0:30,], aes(drink, caffeine_concentration, fill=type))+geom_col()
ggplot(data[0:30,], aes(drink, caffeine_concentration, fill=type))+geom_col()
ggplot(data[0:30,], aes(drink, caffeine_concentration, fill=type))+geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(data.sort1[0:30,], aes(drink, caffeine_concentration, fill=type))+
geom_col()+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("Top 30 drinks by Caffeine Concetration")+xlab("Drink")+
ylab("Caffeine Concentration")
View(data.sort1)
library(tree)
set.seed(122)
train = sample(1:nrow(data), nrow(data)*0.7)
tree.caffeine = tree(type~., data, subset=train)
View(data)
data = data[-data$drink,]
data <- read.csv("caffeine.csv")
#Section for library/package imports----
library(ggplot2)
library(dplyr)
data <- mutate(data, caffeine_concentration = Caffeine..mg. / Volume..ml.)
data = select(data, -drink)
View(data)
set.seed(122)
train = sample(1:nrow(data), nrow(data)*0.7)
tree.caffeine = tree(type~, data, subset=train)
tree.caffeine = tree(type~., data, subset=train)
summary(tree.caffeine)
plot(tree.caffeine)
text(tree.caffeine)
#testing the tree
test.caffeine = data[-train,]
pred=predict(tree.caffeine, test.caffeine, type = "class")
table(pred, test.caffeine$type)
24+41+9+28+11
113/183
#KNN for drink type as well----
library(class)
set.seed(123)
dat.d <- sample(1:nrow(data),size=nrow(data)*0.5,replace = FALSE)
dat.b <- sample(1:nrow(data),size=nrow(data)*0.5,replace = FALSE)
caffeine.test <- data[dat.b,]
caffeine.train <- data[dat.d,]
train.labels<- data$type[dat.d]
test.labels <- data$type[dat.b]
#train.labels <- abnb.norm[dat.d, 3]
#test.labels <- abnb.norm[dat.b, 3]
model.knn <- knn(caffeine.test, caffeine.train, train.labels, k=1)
View(data)
View(caffeine.test)
View(caffeine.train)
model.knn <- knn(caffeine.test, caffeine.train, train.labels, k=1)
#check for need to prune----
cv.caffeine = cv.tree(tree.caffeine, FUN=prune.misclass)
cv.caffeine
prune.caffeine = prune.misclass(tree.caffeine, best = 11)
plot(prune.caffeine)
text(prune.caffeine)
pred=predict(prune.caffeine, test.caffeine, type = "class")
table(pred, test.caffeine$type)
18+52+9+28+11
118/183
prune.caffeine = prune.misclass(tree.caffeine, best = 10)
plot(prune.caffeine)
text(prune.caffeine)
pred=predict(prune.caffeine, test.caffeine, type = "class")
table(pred, test.caffeine$type)
18+52+9+28+11
#stat plot for frequency of drink type
ggplot(data, aes(type, fill=type))+stat_count()
#stat plot for frequency of drink type
ggplot(data, aes(type, fill=type))+stat_count(show.legend = FALSE)+
xlab("Drink Type")+ylab("Frequency")+ggtitle("Drink Type Frequency")+
theme(legend.position = "none")
#Neural Net----
library(nnet)
set.seed(245)
train <- sample(1:nrow(data),size=(nrow(data)*0.7),replace = FALSE)
caffeine.test <- abnb.norm[-train,]
caffeine.test <- data[-train,]
caffeine.train <- data[train,]
caffeine.nn <- nnet(type ~., data = caffeine.train, size = 1)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
table(pred, caffeine.test$type)
mean(pred == caffeine.test$type)
View(caffeine.nn)
nrows(pred)
table(pred$type, caffeine.test$type)
View(pred)
set.seed(245)
train <- sample(1:nrow(data),size=(nrow(data)*0.7),replace = FALSE)
caffeine.test <- data[-train,]
caffeine.train <- data[train,]
caffeine.nn <- nnet(type ~., data = caffeine.train, size = 1)
caffeine.nn <- nnet(type ~., data = caffeine.train, size = 5)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
table(pred, caffeine.test$type)
View(pred)
caffeine.nn <- nnet(caffeine_concentration ~., data = caffeine.train, size = 5)
View(pred)
set.seed(245)
train <- sample(1:nrow(data),size=(nrow(data)*0.7),replace = FALSE)
caffeine.test <- data[-train,]
caffeine.train <- data[train,]
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 5)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
table(pred, caffeine.test$type)
mean(pred == caffeine.test$type)
View(pred)
mean(pred == caffeine.test$caffeine_concentration)
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 10)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
mean(pred == caffeine.test$caffeine_concentration)
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 15)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
mean(pred == caffeine.test$caffeine_concentration)
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 10)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
mean(pred == caffeine.test$caffeine_concentration)
train <- sample(1:nrow(data),size=(nrow(data)*0.7),replace = FALSE)
caffeine.test <- data[-train,]
caffeine.train <- data[train,]
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 10)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
mean(pred == caffeine.test$caffeine_concentration)
train <- sample(1:nrow(data),size=(nrow(data)*0.7),replace = FALSE)
caffeine.test <- data[-train,]
caffeine.train <- data[train,]
caffeine.nn <- nnet(caffeine_concentration~., data = caffeine.train, size = 15)
#testing for neural net----
pred <- predict(caffeine.nn, caffeine.test)
mean(pred == caffeine.test$caffeine_concentration)
